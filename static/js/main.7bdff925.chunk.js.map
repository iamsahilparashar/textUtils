{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutTextutils","onClick","toggle","htmlFor","onChange","colorValue","style","width","height","marginTop","TextForm","useState","text","setText","color","heading","backgroundColor","name","value","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","execCommand","getSelection","removeAllRanges","split","join","filter","element","About","myStyleLight","border","myStyleDark","aria-labelledby","data-bs-parent","alert","role","word","charAt","slice","captilaize","msg","defaultProps","App","setMode","setAlert","message","setTimeout","body","colorV","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7bdff925.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"#\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" to=\"/about\">{props.aboutTextutils}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        {/* <br /> */}\r\n                        <input className=\"form-check-input\" onClick={props.toggle} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{`Enable ${props.mode === 'light' ? 'Darkmode' : 'Lightmode'}`}&nbsp;&nbsp;</label>\r\n                    </div>\r\n                    <div className={`form text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-input\" type=\"color\" id=\"colorPicker\" onChange={props.colorValue} style={{width:15,height:15,marginTop:9}}/>\r\n                        <label className=\"form-label\" htmlFor=\"colorPicker\">&nbsp;Set theme</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutTextutils: PropTypes.string,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'set title here',\r\n    aboutTextutils: 'set about text here',\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n    // text=\"sahil parashar\"; // wrong way to change the state\r\n    // setText(\"hello sahil\"); // correct way to change the state\r\n    const handleUpClick = () => {\r\n        // console.log(\"uppercase was clicked\" + text);\r\n        setText(\"you have clicked on convert to uppercase\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"coverted to uppercase!\",\"success\");\r\n    }\r\n    const handleLoClick = () => {\r\n        // console.log(\"uppercase was clicked\" + text);\r\n        setText(\"you have clicked on convert to lowercase\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"coverted to lowercase!\",\"success\");\r\n    }\r\n    const copyText = () => {\r\n        // console.log(\"uppercase was clicked\" + text);\r\n        var newText = document.getElementById(\"textA\");\r\n        newText.select();\r\n        document.execCommand('copy');\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Text copied!\",\"success\");\r\n    }\r\n    const clearText = () => {\r\n        // console.log(\"uppercase was clicked\" + text);\r\n        setText(\"you have clicked on convert to lowercase\");\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"text has been cleared !\",\"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"handleOnChange was clicked\");\r\n        setText(event.target.value);\r\n    }\r\n    const removeSpace = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(' '));\r\n        props.showAlert(\"extra spaces has been removed!\",\"success\");\r\n    }\r\n    return (\r\n        <>\r\n            <div style={{color:props.mode === 'light' ? 'black' : 'white'}}>\r\n                <div className=\"mb-2\">\r\n                    <h2>{props.heading}</h2>\r\n                    {/* <textarea className=\"form-control\" name=\"textA\" placeholder=\"Enter a text here\" rows=\"8\"></textarea> */}\r\n                    <textarea className=\"form-control\" style={{backgroundColor:props.mode === 'dark' ? 'black' : 'white',color:props.mode === 'light' ? 'black' : 'white'}} name=\"textA\" id=\"textA\" value={text} onChange={handleOnChange} rows=\"8\"></textarea>\r\n                </div>\r\n                <div>\r\n                    <button disabled={text.length === 0} className={`btn btn-${props.mode === 'dark'?'success' : 'primary'} mx-1 my-1`} onClick={handleUpClick}>Covert to uppercase</button>\r\n                    <button disabled={text.length === 0} className={`btn btn-${props.mode === 'dark'?'success' : 'primary'} mx-1 my-1`} onClick={handleLoClick}>Covert to lowercase</button>\r\n                    <button disabled={text.length === 0} className={`btn btn-${props.mode === 'dark'?'success' : 'primary'} mx-1 my-1`} onClick={copyText}>Copy text</button>\r\n                    <button disabled={text.length === 0} className={`btn btn-${props.mode === 'dark'?'success' : 'primary'} mx-1 my-1`} onClick={clearText}>Clear text</button>\r\n                    <button disabled={text.length === 0} className={`btn btn-${props.mode === 'dark'?'success' : 'primary'} mx-1 my-1`} onClick={removeSpace}>Remove Extra Spaces </button>\r\n                </div>\r\n                <div className=\"my-3\">\r\n                    <h3>Summary</h3>\r\n                    <p>{text.split(' ').filter((element)=>{return element.length !==0}).length} <b>words</b> and {text.length} <b>characters</b></p>\r\n                </div>\r\n                <div>\r\n                    <h3>Preview</h3>\r\n                    <p>{`${text.length > 0 ? text : \"Nothing to preview..\"}`}</p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: 'white',\r\n    //     backgroundColor: 'black'\r\n    // });\r\n\r\n    const [myStyleLight, setMyStyleLight] = useState({\r\n        color: 'white',\r\n        backgroundColor: 'black'\r\n    });\r\n    const [myStyleDark, setMyStyleDark] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white',\r\n        border: \"2px solid white\"\r\n    });\r\n\r\n    // const [btnState, setbtnState] = useState(\"Enable light mode\")\r\n\r\n    // const changeMode = () => {\r\n    //     if (myStyle.color === 'white') {\r\n    //         setMyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black'\r\n    //         })\r\n    //         setbtnState(\"Enable light mode\")\r\n    //     }\r\n    //     else{\r\n    //         setMyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white',\r\n    //             border: \"2px solid white\"\r\n    //         })\r\n    //         setbtnState(\"Enable dark mode\")\r\n    //     }\r\n    // }\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={props.mode === 'dark'?myStyleLight:myStyleDark}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                            <button className=\"accordion-button\" style={props.mode === 'dark'?myStyleLight:myStyleDark} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                                <strong>Analyze Your text </strong>\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" style={props.mode === 'dark'?myStyleLight:myStyleDark} aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                            TextUtils gives you a way to analyze your text quickly and efficiently. Be it word count, character count or\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                            <button className=\"accordion-button collapsed\" style={props.mode === 'dark'?myStyleLight:myStyleDark} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            <strong>Free to use</strong>\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" style={props.mode === 'dark'?myStyleLight:myStyleDark} aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                            TextUtils is a free character counter tool that provides instant character count & word count statistics for a given text. TextUtils reports the number of words and characters. Thus it is suitable for writing text with word/ character limit.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                            <button className=\"accordion-button collapsed\" style={props.mode === 'dark'?myStyleLight:myStyleDark} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                                <strong>Browser Compatible</strong>\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" style={props.mode === 'dark'?myStyleLight:myStyleDark} aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                            This word counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, books, excel document, pdf document, essays, etc.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* <div className=\"container my-2\">\r\n                    <button className=\"btn btn-primary\" onClick={changeMode}>{btnState}</button>\r\n                </div> */}\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function alert(props) {\r\n    const captilaize = (word) => {\r\n        let newText = word.toLowerCase();\r\n        return newText.charAt(0).toUpperCase() + newText.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n        {\r\n            props.alert && <div className={`alert alert-${props.alert.type}`} role=\"alert\" style={{ backgroundColor: props.mode === 'light' ? '#0d6efd' : '#198754', color: 'black' }}>\r\n                <strong>{captilaize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n// import logo from './logo.svg';\n// import Screenshot from './img.png'\n\n// let name = \"sahil\"\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const colorValue = () => {\n    let colorV = document.getElementById('colorPicker').value;\n    document.body.style.backgroundColor = colorV;\n  }\n  const toggle = () => {\n    if (mode === 'dark') {\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      // to change the title \n      document.title = \"Textutils-Lightmode\"\n\n\n    }\n    else {\n      setMode('dark')\n      document.body.style.backgroundColor = 'black';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      // to change the title \n      document.title = \"Textutils-Darkmode\"\n\n      // to change(chamkana) the  title randomly and to attract users to install something \n      // setInterval(() => {\n      //   document.title=\"install Textutils know\";        \n      // },2000);\n      // setInterval(() => {\n      //   document.title=\"Textutils is amazing\"        \n      // },1500);\n\n    }\n  }\n  return (\n    <>\n      <Router>\n        <Navbar title=\"Textutils\" aboutTextutils=\"About\" mode={mode} toggle={toggle} colorValue={colorValue} />\n        <Alert alert={alert} mode={mode} />\n        <div className=\"container my-3\">\n          <Switch>\n            {/* always use (exact path) not (path) beacuse react partial matching karta h jaise\n                /users\n                /users/sahil\n                agr app users/sahil pe jaoge to ye apko users pe le jayega due to partial matching\n              */} \n            <Route exact path=\"/about\">\n              <About heading=\"About Us\" mode={mode} />\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm heading=\"Enter text below to analyze\" mode={mode} showAlert={showAlert} />\n            </Route>\n          </Switch>\n          {/* <About heading=\"About Us\" /> */}\n        </div>\n      </Router>\n    </>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}